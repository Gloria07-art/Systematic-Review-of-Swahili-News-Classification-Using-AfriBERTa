# -*- coding: utf-8 -*-
"""general_fine_tuning&topic_fine_tuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1StX6Ouqf3HWlCD0KjIGZwXpsZaKHyNpA



!pip install datasets
from datasets import load_dataset
import pandas as pd
from transformers import AutoModelForMaskedLM, AutoTokenizer,TrainingArguments,Trainer,DataCollatorForLanguageModeling

import re
from datasets import Dataset
import random
import torch
from transformers import TrainerCallback
from sklearn.model_selection import train_test_split

from transformers import AutoModelForMaskedLM, AutoTokenizer, Trainer, TrainingArguments, AutoModelForSequenceClassification
from datasets import load_dataset, Dataset, DatasetDict
from sklearn.model_selection import train_test_split
import re
import pandas as pd
import torch
from sklearn.metrics import accuracy_score, f1_score

"""First Task"""

model = AutoModelForMaskedLM.from_pretrained("castorini/afriberta_base")
tokenizer = AutoTokenizer.from_pretrained("castorini/afriberta_base")
tokenizer.model_max_length = 512

dataset = load_dataset("Harsit/xnli2.0_train_swahili")
filtered_dataset = dataset.filter(lambda example: example['premise'] is not None and example['premise'] != '')
filtered_dataset = filtered_dataset.remove_columns([col for col in filtered_dataset['train'].column_names if col != 'premise'])

df = pd.DataFrame(filtered_dataset['train']['premise'], columns=['premise'])
df['length'] = df['premise'].apply(len)
df = df[(df['length'] > 500) & (df['length'] <= 512)]
text = df['premise'].tolist()

def clean_text(text):
    text = re.sub(r'[^\w\s,.!?]', '', text)
    text = text.lower()
    text = re.sub(r'\s+', ' ', text).strip()
    text = re.sub(r'http\S+|www\S+', '', text)
    return text

cleaned_texts = [clean_text(t) for t in text]

dataset = Dataset.from_dict({"text": cleaned_texts})

def tokenize_function(examples):
    return tokenizer(examples["text"], padding="max_length", truncation=True)

tokenized_dataset = dataset.map(tokenize_function, batched=True)

train_test_split_ratio = 0.8
train_df, temp_df = train_test_split(tokenized_dataset.to_pandas(), test_size=1 - train_test_split_ratio)
val_df, test_df = train_test_split(temp_df, test_size=0.5)

train_dataset = Dataset.from_pandas(train_df)
val_dataset = Dataset.from_pandas(val_df)
test_dataset = Dataset.from_pandas(test_df)

from transformers import DataCollatorForLanguageModeling
data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer,
    mlm=True,
    mlm_probability=0.15
)

training_args = TrainingArguments(
    output_dir="./results",
    learning_rate=5e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    warmup_steps=500,
    weight_decay=0.01,
    evaluation_strategy="epoch",
)
import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support

def compute_metrics(eval_pred):

    logits, labels = eval_pred

    predictions = np.argmax(logits, axis=-1)

    active_elements_mask = labels != -100

    active_predictions = predictions[active_elements_mask]
    active_labels = labels[active_elements_mask]


    acc = accuracy_score(active_labels, active_predictions)

    precision, recall, f1, _ = precision_recall_fscore_support(
        active_labels, active_predictions, average='micro'
    )

    return {
        "accuracy": acc,
        "f1": f1,
        "precision": precision,
        "recall": recall
    }
class LogCallback(TrainerCallback):
    def on_epoch_end(self, args, state, control, logs=None, **kwargs):
        if logs is not None:
            train_accuracy = logs.get("train_accuracy")
            if train_accuracy is not None:
                print(f"Epoch: {state.epoch}, Training Accuracy: {train_accuracy:.4f}")

log_callback = LogCallback()

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
    callbacks=[log_callback]
)
trainer.train()

import math

eval_results = trainer.evaluate()
print(f"Perplexity: {math.exp(eval_results['eval_loss']):.2f}")

# Save the fine-tuned model
model.save_pretrained("./afriberta_swahili_mlm_finetuned")
tokenizer.save_pretrained("./afriberta_swahili_mlm_finetuned")

"""# Second-Finetuning"""

import re
import pandas as pd
from datasets import load_dataset, DatasetDict
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from sklearn.metrics import accuracy_score, f1_score
import torch



ds = load_dataset("sartifyllc/SwahiliNewsClassfication")
train_df = pd.DataFrame(ds['train'])

unique_categories = train_df['category'].unique()
print("Unique Categories:", unique_categories)

def filter_genres(example):
    return example['category'].strip().lower() in ['kitaifa', 'biashara']

filtered_datasets = ds.filter(filter_genres)

train_test_split = filtered_datasets['train'].train_test_split(test_size=0.2)
filtered_datasets = DatasetDict({
    'train': train_test_split['train'],
    'validation': train_test_split['test']
})

def clean_text(text):
    text = re.sub(r'[^\w\s,.!?]', '', text)
    text = text.lower()
    text = re.sub(r'\s+', ' ', text).strip()
    text = re.sub(r'http\S+|www\S+', '', text)
    return text


filtered_datasets = filtered_datasets.map(lambda examples: {'content': [clean_text(text) for text in examples['content']]}, batched=True)

tokenizer = AutoTokenizer.from_pretrained("./afriberta_swahili_mlm_finetuned")

def tokenize_function(examples):
    return tokenizer(examples['content'], padding='max_length', truncation=True, max_length=512)

tokenized_datasets = filtered_datasets.map(tokenize_function, batched=True)


num_train_samples = 2000
num_val_samples = 500

train_dataset = tokenized_datasets['train'].shuffle(seed=42).select(range(num_train_samples))

eval_dataset = tokenized_datasets['validation'].shuffle(seed=42).select(range(num_val_samples))

model = AutoModelForSequenceClassification.from_pretrained("./afriberta_swahili_mlm_finetuned", num_labels=2)

training_args = TrainingArguments(
    output_dir="./results",
    learning_rate=5e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=3,
    warmup_steps=500,
    weight_decay=0.01,
    evaluation_strategy="epoch",
)

def compute_metrics(pred):
    predictions = torch.tensor(pred.predictions)
    predictions = torch.argmax(predictions, dim=1)
    labels = pred.label_ids
    acc = accuracy_score(labels, predictions.numpy())
    f1 = f1_score(labels, predictions.numpy(), average='weighted')
    return {'accuracy': acc, 'f1': f1}

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    compute_metrics=compute_metrics
)

trainer.train()

model.save_pretrained("./trained_afriberta")
tokenizer.save_pretrained("./trained_afriberta")

eval_results = trainer.evaluate()
print(f"Accuracy: {eval_results['eval_accuracy']}")
print(f"F1 Score: {eval_results['eval_f1']}")

model.save_pretrained("./trained_afriberta")
tokenizer.save_pretrained("./trained_afriberta")

eval_results = trainer.evaluate()
print(f"Accuracy: {eval_results['eval_accuracy']}")
print(f"F1 Score: {eval_results['eval_f1']}")

from sklearn.metrics import classification_report

predictions = trainer.predict(eval_dataset)
preds = torch.argmax(torch.tensor(predictions.predictions), dim=1)
labels = predictions.label_ids

print("Classification Report:\n", classification_report(labels, preds.numpy(), target_names=['biashara', 'michezo']))

import torch
import seaborn as sns
import matplotlib.pyplot as plt
from transformers import AutoTokenizer, AutoModelForSequenceClassification

def visualize_attention(text):

    model.eval()

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model.to(device)

    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
    inputs = {k: v.to(device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model(**inputs, output_attentions=True)

    attentions = outputs.attentions[-1]

    avg_attention = attentions[0].mean(dim=0).detach().cpu().numpy()

    tokens = tokenizer.convert_ids_to_tokens(inputs['input_ids'][0].cpu().numpy())

    plt.figure(figsize=(10, 8))

    sns.heatmap(avg_attention, xticklabels=tokens, yticklabels=tokens, cmap="coolwarm", annot=True, fmt=".2f", cbar=True)

    plt.title('Attention Heatmap')
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)
    plt.xlabel("Tokens")
    plt.ylabel("Tokens")
    plt.tight_layout()
    plt.show()

example_text = "Biashara za kimataifa zinaongezeka kila mwaka."
visualize_attention(example_text)

"""**inference**"""

from transformers import AutoTokenizer, AutoModelForTokenClassification
from transformers import pipeline

model = AutoModelForTokenClassification.from_pretrained("./trained_afriberta")
tokenizer = AutoTokenizer.from_pretrained("./trained_afriberta")

nlp = pipeline("token-classification", model=model, tokenizer=tokenizer)



text = "Mkuu wa Mkoa wa Tabora, Aggrey Mwanri amesitisha likizo za viongozi wote mkoani humo kutekeleza maazimio ya Jukwaa la Fursa za Biashara la mko"


tokens = nlp(text)

for token in tokens:
    print(f"Token: {token['word']}, Label: {token['entity']}")